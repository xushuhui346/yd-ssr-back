import { MiddlewareParameter, Constructor, IRouterConfigState } from './state-util';
import { HttpVerb } from './http-verbs';
/**
 * Method builder options.
 */
export interface IMethodBuilderOpts {
    before?: MiddlewareParameter;
    after?: MiddlewareParameter;
}
/**
 * Verb builder function.
 */
export declare type VerbBuilderFunction = (path: string, method: string, opts?: IMethodBuilderOpts) => IAwilixControllerBuilder;
/**
 * Fluid router builder.
 */
export interface IAwilixControllerBuilder {
    target: Constructor | Function;
    get: VerbBuilderFunction;
    post: VerbBuilderFunction;
    put: VerbBuilderFunction;
    patch: VerbBuilderFunction;
    delete: VerbBuilderFunction;
    head: VerbBuilderFunction;
    options: VerbBuilderFunction;
    connect: VerbBuilderFunction;
    all: VerbBuilderFunction;
    verbs(verbs: Array<HttpVerb>, path: string, method: string, opts?: IMethodBuilderOpts): this;
    prefix(path: string): this;
    before(value: MiddlewareParameter): this;
    after(value: MiddlewareParameter): this;
}
/**
 * Configures routing config for a class or function to be invoked by a router.
 *
 * @example
 *   const api = ({ todoService }) => ({
 *     find: (ctx) => { ... }
 *   })
 *
 *   export default createController(api)
 *     .prefix('/todos')
 *     .before(bodyParser())
 *     .get('/', 'find')
 *     .get('/:id', 'get')
 *     .post('/:id', 'create', {
 *       before: [authenticate()],
 *     })
 *     .patch('/:id', 'update', {
 *       before: [authenticate()]
 *     })
 */
export declare function createController(ClassOrFunction: Constructor | Function): IAwilixControllerBuilder;
/**
 * Creates a builder from existing state.
 * This is used internally, but exported for convenience.
 *
 * @param ClassOrFunction The target to invoke.
 * @param state Existing state to continue building on.
 */
export declare function createControllerFromState(ClassOrFunction: Constructor | Function, state: IRouterConfigState): IAwilixControllerBuilder;
